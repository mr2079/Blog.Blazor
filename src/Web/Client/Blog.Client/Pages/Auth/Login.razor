@page "/login"

<PageTitle>ورود به حساب</PageTitle>

<section class="section pt-55 mb-50">
	<div class="container-fluid">
		<div class="sign widget">
			<div class="section-title">
				<h5>ورود به حساب</h5>
			</div>

			<EditForm Model="Model!" OnValidSubmit="Submit" class="sign-form widget-form contact_form">
				<DataAnnotationsValidator />

				<div class="form-group">
					<InputText @bind-Value="Model!.PhoneNumber" class="form-control" placeholder="شماره موبایل *" />
					<ValidationMessage For="() => Model!.PhoneNumber" class="field-validation-error" />
				</div>

				<div class="form-group">
					<InputText type="password" @bind-Value="Model!.Password" class="form-control" placeholder="کلمه عبور *" />
					<ValidationMessage For="() => Model!.Password" class="field-validation-error" />
				</div>

				<div class="sign-controls form-group">
					<div class="custom-control custom-checkbox">
						<InputCheckbox @bind-Value="Model!.RememberMe" class="custom-control-input" id="rememberMe" />
						<label class="custom-control-label" for="rememberMe"> مرا به خاطر بسپار </label>
						<ValidationMessage For="() => Model!.RememberMe" class="field-validation-error" />
					</div>
				</div>
				<div class="form-group">
					<button type="submit" class="btn-custom">ورود</button>
				</div>
				<p class="form-group text-center">
					حساب کاربری ندارید؟ <NavLink href="register" class="btn-link">ثبت نام کنید</NavLink>
				</p>

			</EditForm>
		</div>
	</div>
</section>

@code {
	[SupplyParameterFromForm]
	public LoginModel? Model { get; set; }

	[Inject] public IJSRuntime Js { get; set; } = null!;
	[Inject] public HttpService Http { get; set; } = null!;
	[Inject] public NavigationManager Navigation { get; set; } = null!;
	[Inject] public ILocalStorageService LocalStorage { get; set; } = null!;
	[Inject] public AuthenticationStateProvider StateProvider { get; set; } = null!;

	protected override Task OnInitializedAsync()
	{
		Model ??= new();

		return base.OnInitializedAsync();
	}

	private async Task Submit()
	{
		await Js.InvokeVoidAsync("openSwalLoading");

		var res = await Http.PostAsync<ApiResponse<TokenModel>>("auth/login", Model!);

		await Js.InvokeVoidAsync("closeSwal");

		if (res is { Succeeded: true })
		{
			await LocalStorage.SetItemAsStringAsync("_at", res.Content?.AccessToken!);
			await LocalStorage.SetItemAsStringAsync("_rt", res.Content?.RefreshToken!);

			await StateProvider.GetAuthenticationStateAsync();

			await Js.InvokeVoidAsync("openSwal",
				"success",
				string.Join("<br/>",
					res.Messages));

			// TODO: Redirect to user panel

			Navigation.NavigateTo("/");
		}
		else
		{
			await Js.InvokeVoidAsync("openSwal",
				"error",
				string.Join("<br/>", res?.Messages!),
				5000);
		}
	}
}
